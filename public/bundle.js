/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/elements.ts":
/*!*************************!*\
  !*** ./src/elements.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PokemonCard = PokemonCard;\nexports.PokemonStats = PokemonStats;\nexports.PokemonEvolutions = PokemonEvolutions;\nexports.PokemonMoveCard = PokemonMoveCard;\nexports.PokemonMoveset = PokemonMoveset;\nexports.PokemonShowcase = PokemonShowcase;\nexports.RaidCard = RaidCard;\nconst repo = __importStar(__webpack_require__(/*! ./util/repository */ \"./src/util/repository.ts\"));\nfunction PokemonCard(pokemon) {\n    //\n    // I AM SORRY !\n    //\n    const isGenericForm = (pokemon.formId !== pokemon.id);\n    const regions = {\n        alola: pokemon.formId == ((pokemon.id).toString() + \"_ALOLA\"),\n        galarian: pokemon.formId == ((pokemon.id).toString() + \"_GALARIAN\"),\n        paldea: pokemon.formId == ((pokemon.id).toString() + \"_PALDEA\"),\n        hisuian: pokemon.formId == ((pokemon.id).toString() + \"_HISUIAN\")\n    };\n    let region = \"\";\n    let isRegional = false;\n    if (regions.alola) {\n        region = \"Alola\";\n        isRegional = true;\n    }\n    if (regions.galarian) {\n        region = \"Galar\";\n        isRegional = true;\n    }\n    if (regions.paldea) {\n        region = \"Paldea\";\n        isRegional = true;\n    }\n    if (regions.hisuian) {\n        region = \"Hisui\";\n        isRegional = true;\n    }\n    const isFunctionalForm = !isRegional && isGenericForm;\n    let regionAttribute = \"\";\n    let functionalAttribute = \"\";\n    if (isRegional) {\n        regionAttribute = `\n            <div class=\"attribute regional\">\n                <span class=\"material-symbols-rounded\">public</span>\n                <span class=\"text\">${region}</span>\n            </div>\n        `;\n    }\n    if (isFunctionalForm) {\n        functionalAttribute = `\n            <div class=\"attribute functional\">\n                <span class=\"material-symbols-rounded\">category</span>\n            </div>\n        `;\n    }\n    let attributes = \"\";\n    if (isGenericForm) {\n        attributes = `\n            <div class=\"attributes\">\n                ${regionAttribute}\n                ${functionalAttribute}\n            </div>\n        `;\n    }\n    const hasImage = pokemon.imageUrl !== undefined;\n    const pokemonCard = document.createElement('a');\n    pokemonCard.classList.add('card');\n    pokemonCard.innerHTML = `\n        <img draggable=\"false\" loading=\"lazy\" src=\"${hasImage ? pokemon.imageUrl : '/assets/unknown.png'}\" alt=\"${pokemon.name}\" />\n        <div class=\"type-icons\"><img src=\"${repo.getTypeIcon(pokemon.type1)}\" />${pokemon.type2 ? `<img src=\"${repo.getTypeIcon(pokemon.type2)}\" />` : \"\"}</div>\n        <div class=\"card-title\"><span class=\"dexNr\">#${pokemon.dexNr}</span> <span>${pokemon.name}</span></div>\n        ${attributes}\n    `;\n    pokemonCard.setAttribute('href', `/pokedex/${pokemon.formId.toLowerCase()}`);\n    pokemonCard.style.setProperty('--bg-color', `${repo.typeColors[pokemon.type1]}ff`);\n    if (!hasImage) {\n        pokemonCard.classList.add('unknown');\n    }\n    return pokemonCard;\n}\nfunction PokemonStats(pokemon) {\n    const stats = pokemon.stats;\n    const statsElement = document.createElement('div');\n    statsElement.classList.add('stats');\n    statsElement.innerHTML = `\n        <div class=\"stat\">\n            <div class=\"stat-name\">ATK</div>\n            <progress class=\"stat-bar\" value=\"${stats.attack}\" max=\"300\"></progress>\n            <div class=\"stat-value\">${stats.attack}</div>\n        </div>\n        <div class=\"stat\">\n            <div class=\"stat-name\">DEF</div>\n            <progress class=\"stat-bar\" value=\"${stats.defense}\" max=\"300\"></progress>\n            <div class=\"stat-value\">${stats.defense}</div>\n        </div>\n        <div class=\"stat\">\n            <div class=\"stat-name\">HP </div>\n            <progress class=\"stat-bar\" value=\"${stats.stamina}\" max=\"300\"></progress>\n            <div class=\"stat-value\">${stats.stamina}</div>\n        </div>\n    `;\n    return statsElement;\n}\nfunction PokemonEvolutions(evolutions) {\n    const evolutionElement = document.createElement('div');\n    evolutionElement.classList.add('evolutions');\n    evolutions.forEach((evolution) => {\n        const evolutionCard = document.createElement('div');\n        evolutionCard.classList.add('evolution');\n        evolutionCard.innerHTML = `\n            <div class=\"evolution-name\">${evolution.formId}</div>\n            <div class=\"evolution-candy\">${evolution.candies} candies</div>\n        `;\n        evolutionElement.appendChild(evolutionCard);\n    });\n    return evolutionElement;\n}\nfunction PokemonMoveCard(move) {\n    const moveElement = document.createElement('div');\n    moveElement.attributes['data-id'] = move.id;\n    moveElement.classList.add('move');\n    let legacyEffect = \"\";\n    if (move.isLegacy) {\n        moveElement.classList.add('legacy');\n        legacyEffect = `<img class=\"legacy-effect\" src=\"https://raw.githubusercontent.com/PokeMiners/pogo_assets/master/Images/Effects/ring_spike_sharp.png\"></img>`;\n    }\n    moveElement.innerHTML = `\n        <div class=\"move-type\"><img src=\"${repo.getTypeIcon(move.type)}\" /></div>\n        <div class=\"move-name\">${move.name}</div>\n        ${legacyEffect}\n    `;\n    return moveElement;\n}\nfunction PokemonMoveset(moves) {\n    const moveset = document.createElement('div');\n    moveset.classList.add('moveset');\n    //legacy move priority\n    moves.sort((a, b) => {\n        if (a.isLegacy && !b.isLegacy) {\n            return -1;\n        }\n        if (!a.isLegacy && b.isLegacy) {\n            return 1;\n        }\n        return 0;\n    });\n    const title = document.createElement('div');\n    title.classList.add('title');\n    title.textContent = \"Moves\";\n    moveset.appendChild(title);\n    moves.forEach((move) => {\n        const moveElement = PokemonMoveCard(move);\n        moveset.appendChild(moveElement);\n    });\n    return moveset;\n}\nfunction PokemonShowcase(pokemon) {\n    const showcase = document.createElement('div');\n    showcase.classList.add('showcase');\n    const hasEvolutions = pokemon.evolutions.length > 0;\n    const family = `\n        <div class=\"family ${!hasEvolutions ? 'disabled' : ''}\">\n            <a class=\"family-nav-item left\">\n                <span class=\"material-symbols-rounded\">arrow_back</span>\n            </a>\n            <a class=\"family-nav-item right\">\n                <span class=\"material-symbols-rounded\">arrow_forward</span>\n            </a>\n        </div>\n    `;\n    const types = document.createElement('div');\n    types.classList.add('types');\n    types.classList.add('type-tinted');\n    types.innerHTML = `\n        <img class=\"type\" src=\"${repo.getTypeIcon(pokemon.type1)}\" />\n        ${pokemon.type2 ? `<img class=\"type\" src=\"${repo.getTypeIcon(pokemon.type2)}\" />` : \"\"}\n    `;\n    showcase.innerHTML = `\n        ${family}\n        <img class=\"pokemon-image\" draggable=\"false\" src=\"${pokemon.imageUrl || \"/assets/unknown.png\"}\" />\n        ${pokemon.megaEvolutions.length > 0 ? `<img class=\"mega-icon\" draggable=\"false\" src=\"${repo.getMegaIconSmall()}\" />` : ''}\n    `;\n    showcase.appendChild(types);\n    return showcase;\n}\nfunction RaidCard(raid) {\n    const raidCard = document.createElement('a');\n    raidCard.classList.add('card');\n    raidCard.innerHTML = `\n        <img draggable=\"false\" src=\"${raid.pokemon.imageUrl || \"/assets/unknown.png\"}\" />\n        <div class=\"card-title\"><span>${raid.pokemon.name}</span></div>\n    `;\n    raidCard.setAttribute('href', `/raids/${raid.pokemon.formId.toLowerCase()}`);\n    return raidCard;\n}\n\n\n//# sourceURL=webpack:///./src/elements.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst repo = __importStar(__webpack_require__(/*! ./util/repository */ \"./src/util/repository.ts\"));\nconst router = __importStar(__webpack_require__(/*! ./router */ \"./src/router.ts\"));\nasync function main() {\n    //await repo.initDB();\n    let dbEmpty = await repo.isDBEmpty();\n    console.log(\"empty\", dbEmpty);\n    console.log(\"stale\", repo.isDBStale());\n    if (dbEmpty || repo.isDBStale()) {\n        console.warn(\"DB is empty or stale, refreshing...\");\n        await repo.initDB();\n        console.log(\"DB refreshed\");\n        window.location.reload();\n    }\n    else {\n        repo.getAllPokemon(1, 1400).then((pokemon) => {\n            console.log(pokemon);\n        });\n        repo.getPokemonByRegion(repo.Region.Galar, 1, 1000).then((types) => {\n            console.log(types);\n        });\n    }\n    //beg browser to listen for storage persist\n    if (navigator.storage && navigator.storage.persist) {\n        const isPersisted = await navigator.storage.persist();\n        console.log(`Persisted storage granted: ${isPersisted}`);\n    }\n    document.addEventListener('click', function (event) {\n        if (event.target.classList.contains('toggle')) {\n            console.log(event.target);\n            event.target.classList.toggle(\"active\");\n        }\n    });\n    const cientRouter = new router.Router(router.routes);\n}\n//top level await moment\nmain().catch(console.error);\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ }),

/***/ "./src/router.ts":
/*!***********************!*\
  !*** ./src/router.ts ***!
  \***********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Router = exports.routes = void 0;\nconst repo = __importStar(__webpack_require__(/*! ./util/repository */ \"./src/util/repository.ts\"));\nconst sidebar = __importStar(__webpack_require__(/*! ./util/sidebar */ \"./src/util/sidebar.ts\"));\nconst pokedex_1 = __importDefault(__webpack_require__(/*! ./templates/pokedex */ \"./src/templates/pokedex.ts\"));\nconst pokemon_1 = __importDefault(__webpack_require__(/*! ./templates/pokemon */ \"./src/templates/pokemon.ts\"));\nconst events_1 = __importDefault(__webpack_require__(/*! ./templates/events */ \"./src/templates/events.ts\"));\nexports.routes = {\n    \"/\": {\n        template: \"/templates/pokedex.html\",\n        script: pokedex_1.default\n    },\n    \"/events\": {\n        template: \"/templates/events.html\",\n        script: events_1.default,\n        resolve: async () => {\n            const raids = await repo.getRaids();\n            return raids;\n        }\n    },\n    \"/pokedex/:id\": {\n        template: \"/templates/pokemon.html\",\n        script: pokemon_1.default,\n        resolve: async (params) => {\n            const formID = params.id;\n            console.log(formID);\n            const pokemon = repo.getPokemonById(formID.toUpperCase());\n            //fetch regional forms if available\n            return pokemon;\n        }\n    },\n    \"/types\": {\n        template: \"/templates/types.html\",\n        script: async () => {\n            console.log(\"types\");\n            sidebar.selectTypes();\n        }\n    },\n    \"404\": {\n        template: \"/templates/404.html\"\n    }\n};\nclass Router {\n    routes;\n    params;\n    routeData;\n    templates;\n    constructor(routes) {\n        this.routes = routes;\n        this.params = {};\n        this.routeData = {};\n        this.templates = {};\n        this.init();\n    }\n    async init() {\n        window.addEventListener('popstate', () => this.handleLocation());\n        document.addEventListener('click', this.handleLinkClick.bind(this));\n        await this.preloadTemplates();\n        await this.handleLocation();\n        console.log(\"[Router] Init\");\n    }\n    async preloadTemplates() {\n        const templatePaths = Object.values(this.routes).map(route => route.template);\n        const uniqueTemplatePaths = Array.from(new Set(templatePaths));\n        await Promise.all(uniqueTemplatePaths.map(async (path) => {\n            const html = await fetch(path).then((data) => data.text());\n            this.templates[path] = html;\n        }));\n    }\n    addRoute(path, config) {\n        this.routes[path] = config;\n    }\n    matchRoute(path) {\n        for (let routePath of Object.keys(this.routes)) {\n            const paramNames = [];\n            const regexPath = routePath.replace(/:[^\\s/]+/g, (match) => {\n                paramNames.push(match.slice(1));\n                return \"([^/]+)\";\n            });\n            const regex = new RegExp(`^${regexPath}$`);\n            console.log(`Matching path: ${path} against regex: ${regex}`);\n            const match = path.match(regex);\n            if (match) {\n                this.params = {};\n                match.slice(1).forEach((value, index) => {\n                    this.params[paramNames[index]] = value;\n                });\n                console.log(`Matched route: ${routePath} with params:`, this.params);\n                return this.routes[routePath];\n            }\n        }\n        console.log(`No match found for path: ${path}`);\n        return this.routes[\"404\"] || null;\n    }\n    async handleLocation() {\n        const path = window.location.pathname;\n        const route = this.matchRoute(path);\n        if (!route) {\n            this.load404();\n            return;\n        }\n        //run prefetch if specified\n        if (route.resolve) {\n            try {\n                this.routeData = await route.resolve(this.params);\n            }\n            catch (error) {\n                console.error(\"Error resolving data for route:\", path, error);\n                this.load404();\n                return;\n            }\n        }\n        //pregressive view transition\n        if (document.startViewTransition) {\n            document.startViewTransition(async () => {\n                await this.loadContent(route);\n            });\n        }\n        else {\n            await this.loadContent(route);\n        }\n    }\n    async loadContent(route) {\n        //loading from template in memory\n        const html = this.templates[route.template];\n        const mainElement = document.querySelector(\"main\");\n        if (mainElement) {\n            mainElement.innerHTML = html;\n        }\n        //script after dom content loaded\n        if (route.script) {\n            route.script(this.params, this.routeData);\n        }\n        if (this.params.id) {\n            this.displayPokemonDetails(this.params.id);\n        }\n    }\n    async navigateTo(path) {\n        window.history.pushState({}, \"\", path);\n        await this.handleLocation();\n    }\n    load404() {\n        const mainElement = document.querySelector(\"main\");\n        if (mainElement) {\n            mainElement.innerHTML = \"<h1>404 - Not Found</h1>\";\n        }\n    }\n    displayPokemonDetails(pokemonID) {\n        console.log(\"Displaying details for Pokémon ID:\", pokemonID);\n    }\n    handleLinkClick(event) {\n        let target = event.target;\n        //crazy way to find if we are actually inside a link but just clicking on a child element\n        while (target && target.tagName !== 'A') {\n            target = target.parentElement;\n        }\n        if (target && target.tagName === 'A' && target.getAttribute('href')) {\n            event.preventDefault();\n            const path = target.getAttribute('href');\n            if (path) {\n                this.navigateTo(path);\n            }\n        }\n    }\n}\nexports.Router = Router;\n\n\n//# sourceURL=webpack:///./src/router.ts?");

/***/ }),

/***/ "./src/templates/events.ts":
/*!*********************************!*\
  !*** ./src/templates/events.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = initEvents;\nconst elements_1 = __webpack_require__(/*! ../elements */ \"./src/elements.ts\");\nconst sidebar = __importStar(__webpack_require__(/*! ../util/sidebar */ \"./src/util/sidebar.ts\"));\nfunction initEvents(params, routeData) {\n    console.log(\"events\");\n    sidebar.selectEvents();\n    const raidsContainer = document.querySelector(\".raids\");\n    const raids = routeData;\n    raids.forEach((raid) => {\n        const raidCard = (0, elements_1.RaidCard)(raid);\n        raidsContainer.appendChild(raidCard);\n    });\n}\n\n\n//# sourceURL=webpack:///./src/templates/events.ts?");

/***/ }),

/***/ "./src/templates/pokedex.ts":
/*!**********************************!*\
  !*** ./src/templates/pokedex.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = initPokedex;\nconst elements_1 = __webpack_require__(/*! ../elements */ \"./src/elements.ts\");\nconst repo = __importStar(__webpack_require__(/*! ../util/repository */ \"./src/util/repository.ts\"));\nconst sidebar = __importStar(__webpack_require__(/*! ../util/sidebar */ \"./src/util/sidebar.ts\"));\nconst page_elements_1 = __webpack_require__(/*! ../util/page-elements */ \"./src/util/page-elements.ts\");\nfunction initPokedex(params, routeData) {\n    console.log(\"pokedex\");\n    sidebar.selectPokedex();\n    page_elements_1.BODY.style.backgroundImage = `var(--dex-bg-gradient)`;\n    page_elements_1.BODY.style.backgroundColor = `var(--dex-bg-top)`;\n    class PokemonLoader {\n        pageNumber = 1;\n        pageSize = 100;\n        isSearched = false;\n        container;\n        spacer;\n        main;\n        dexSearchInput;\n        bottomReached = false;\n        totalPokemonCount = 0;\n        constructor(containerId, spacerId, mainSelector, searchInputId) {\n            this.container = document.getElementById(containerId);\n            this.spacer = document.getElementById(spacerId);\n            this.main = document.querySelector(mainSelector);\n            this.dexSearchInput = document.getElementById(searchInputId);\n            console.log(\"init PokemonLoader\");\n            this.init();\n        }\n        //dependency injection? more like dependency rejection\n        async init() {\n            this.totalPokemonCount = await repo.getTotalPokemonCount();\n            await this.loadPage();\n            this.setupEventListeners();\n        }\n        async loadPage(reset = false) {\n            let result;\n            if (this.isSearched) {\n                result = await repo.searchPokemonByName(this.dexSearchInput.value, this.pageNumber, this.pageSize);\n            }\n            else {\n                result = await repo.getAllPokemon(this.pageNumber, this.pageSize);\n            }\n            this.renderPokemon(result, reset);\n        }\n        renderPokemon(pokemonArray, reset = false) {\n            if (reset) {\n                this.container.innerHTML = \"\";\n            }\n            pokemonArray.forEach((pokemon) => {\n                const pokemonCard = (0, elements_1.PokemonCard)(pokemon);\n                this.container.appendChild(pokemonCard);\n            });\n            this.adjustSpacer();\n        }\n        //for discord style \"filling the space in\" lazy loading\n        adjustSpacer() {\n            const containerBottom = this.container.getBoundingClientRect().bottom;\n            const viewportHeight = window.innerHeight;\n            const remainingHeight = viewportHeight - containerBottom;\n            if (remainingHeight > 0) {\n                this.spacer.style.height = Math.max(remainingHeight, 0) + 'px';\n            }\n            else {\n                this.spacer.style.height = '0px';\n            }\n        }\n        //javascript nonsense\n        setupEventListeners() {\n            this.dexSearchInput.addEventListener(\"input\", this.onSearchInput.bind(this));\n            this.main.addEventListener(\"scroll\", this.onScroll.bind(this));\n        }\n        async onSearchInput() {\n            this.isSearched = this.dexSearchInput.value.length > 0;\n            this.pageNumber = 1;\n            await this.loadPage(true);\n        }\n        async onScroll() {\n            if (this.bottomReached)\n                return;\n            const threshold = 400;\n            const scrollable = this.main;\n            if (Math.abs(scrollable.scrollHeight - scrollable.scrollTop - scrollable.clientHeight) <= threshold) {\n                //checks first before trying to load more\n                const maxPageNumber = Math.ceil(this.totalPokemonCount / this.pageSize);\n                if (this.pageNumber >= maxPageNumber) {\n                    this.bottomReached = true;\n                    return;\n                }\n                this.pageNumber++;\n                this.bottomReached = true;\n                //save pos\n                const lastElement = scrollable.querySelector('.card:last-child');\n                const lastElementOffset = lastElement.offsetTop;\n                const previousScrollTop = scrollable.scrollTop;\n                await this.loadPage();\n                //load pos\n                const newLastElementOffset = lastElement.offsetTop;\n                scrollable.scrollTop = previousScrollTop + (newLastElementOffset - lastElementOffset);\n                //allow more load events\n                this.bottomReached = false;\n            }\n        }\n    }\n    const pokemonLoader = new PokemonLoader('container', 'spacer', 'main', 'dex-search');\n}\n\n\n//# sourceURL=webpack:///./src/templates/pokedex.ts?");

/***/ }),

/***/ "./src/templates/pokemon.ts":
/*!**********************************!*\
  !*** ./src/templates/pokemon.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = initPokemon;\nconst elements_1 = __webpack_require__(/*! ../elements */ \"./src/elements.ts\");\nconst repo = __importStar(__webpack_require__(/*! ../util/repository */ \"./src/util/repository.ts\"));\nconst sidebar = __importStar(__webpack_require__(/*! ../util/sidebar */ \"./src/util/sidebar.ts\"));\nconst page_elements_1 = __webpack_require__(/*! ../util/page-elements */ \"./src/util/page-elements.ts\");\nfunction initPokemon(params, routeData) {\n    console.log(\"pokemon\");\n    console.log(\"early resolved:\", routeData);\n    sidebar.selectPokedex();\n    const pokemon = routeData;\n    console.log(pokemon);\n    page_elements_1.BODY.style.backgroundImage = 'unset';\n    page_elements_1.BODY.style.backgroundColor = `${repo.typeColors[pokemon.type1]}`;\n    page_elements_1.PAGE_CONTAINER.style.backgroundImage = `unset`;\n    const showcase = document.querySelector(\".showcase\");\n    const pokemonShowcase = (0, elements_1.PokemonShowcase)(pokemon);\n    showcase.replaceWith(pokemonShowcase);\n    let tintedContainers = document.querySelectorAll(\".type-tinted\");\n    tintedContainers.forEach((container) => {\n        container.style.backgroundColor = `color-mix( in srgb, var(--bg1) 50%, ${repo.typeColors[pokemon.type1]}`;\n    });\n    const background = document.querySelector(\".background\");\n    background.style.backgroundImage = `url('${repo.getTypeBackground(pokemon.type1)}')`;\n    background.style.backgroundSize = '316px';\n    background.style.backgroundRepeat = 'no-repeat';\n    background.style.backgroundPosition = 'top left';\n    const pokemonTitle = document.querySelector(\".info > .title\");\n    const name = pokemonTitle.querySelector(\".name\");\n    const dexNr = pokemonTitle.querySelector(\".dex-nr\");\n    name.textContent = pokemon.name;\n    dexNr.textContent = `#${pokemon.dexNr}`;\n    const formSelector = document.querySelector(\".form-selector\");\n    pokemon.regionForms.forEach((form) => {\n        const formOption = document.createElement('input');\n        formOption.type = 'radio';\n        formOption.classList.add('form-option');\n        formOption.name = 'form';\n        formOption.id = form;\n        const formLabel = document.createElement('a');\n        formLabel.textContent = form;\n        formLabel.href = `/pokedex/${form.toLowerCase()}`;\n        formSelector.appendChild(formOption);\n        formSelector.appendChild(formLabel);\n    });\n    if (pokemon.regionForms.length < 1) {\n        formSelector.style.display = 'none';\n    }\n    const stats = document.querySelector(\".stats\");\n    // const pokemonStats = PokemonStats(pokemon);\n    // stats.replaceWith(pokemonStats);\n    stats.remove(); // for now until there's actual UI for it\n    const quickMoves = document.querySelector(\".quick-moves\");\n    const moveset = (0, elements_1.PokemonMoveset)(pokemon.quickMoves);\n    quickMoves.replaceWith(moveset);\n    const chargedMoves = document.querySelector(\".charged-moves\");\n    const chargedMoveset = (0, elements_1.PokemonMoveset)(pokemon.chargedMoves);\n    chargedMoves.replaceWith(chargedMoveset);\n    const evolutions = document.querySelector(\".evolutions\");\n    pokemon.evolutions.forEach((evolution) => {\n        const evolutionCard = document.createElement('a');\n        evolutionCard.href = `/pokedex/${evolution.formId.toLowerCase()}`;\n        evolutionCard.classList.add('evolution');\n        evolutionCard.innerHTML = `\n            <div class=\"evolution-name\">${evolution.formId}</div>\n            <div class=\"evolution-candy\">${evolution.candies} candies</div>\n        `;\n        evolutions.appendChild(evolutionCard);\n    });\n}\n\n\n//# sourceURL=webpack:///./src/templates/pokemon.ts?");

/***/ }),

/***/ "./src/util/page-elements.ts":
/*!***********************************!*\
  !*** ./src/util/page-elements.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BODY = exports.PAGE_CONTAINER = void 0;\nexports.PAGE_CONTAINER = document.querySelector(\"main\");\nexports.BODY = document.querySelector(\"body\");\n\n\n//# sourceURL=webpack:///./src/util/page-elements.ts?");

/***/ }),

/***/ "./src/util/repository.ts":
/*!********************************!*\
  !*** ./src/util/repository.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.typeColors = exports.Region = exports.BaseURL = void 0;\nexports.getJson = getJson;\nexports.getTypeIcon = getTypeIcon;\nexports.getWeatherIcon = getWeatherIcon;\nexports.getRaids = getRaids;\nexports.initDB = initDB;\nexports.getAllPokemon = getAllPokemon;\nexports.getPokemonById = getPokemonById;\nexports.getPokemonByRegion = getPokemonByRegion;\nexports.searchPokemonByName = searchPokemonByName;\nexports.isDBEmpty = isDBEmpty;\nexports.isDBStale = isDBStale;\nexports.getTypeBackground = getTypeBackground;\nexports.getMegaIconSmall = getMegaIconSmall;\nexports.getTotalPokemonCount = getTotalPokemonCount;\nvar BaseURL;\n(function (BaseURL) {\n    BaseURL[\"PokedexAPI\"] = \"https://pokemon-go-api.github.io/pokemon-go-api/api\";\n    BaseURL[\"PokeMiners\"] = \"https://raw.githubusercontent.com/PokeMiners/pogo_assets/master\";\n    BaseURL[\"PokeBattler\"] = \"https://fight.pokebattler.com\";\n})(BaseURL || (exports.BaseURL = BaseURL = {}));\nvar sortBy;\n(function (sortBy) {\n    sortBy[\"Name\"] = \"name\";\n    sortBy[\"DexNr\"] = \"dexNr\";\n})(sortBy || (sortBy = {}));\nvar sortDir;\n(function (sortDir) {\n    sortDir[\"Asc\"] = \"asc\";\n    sortDir[\"Desc\"] = \"desc\";\n})(sortDir || (sortDir = {}));\nvar Region;\n(function (Region) {\n    Region[\"Kanto\"] = \"KANTO\";\n    Region[\"Johto\"] = \"JOHTO\";\n    Region[\"Hoenn\"] = \"HOENN\";\n    Region[\"Sinnoh\"] = \"SINNOH\";\n    Region[\"Unova\"] = \"UNOVA\";\n    Region[\"Kalos\"] = \"KALOS\";\n    Region[\"Alola\"] = \"ALOLA\";\n    Region[\"Galar\"] = \"GALARIAN\";\n    Region[\"Paldea\"] = \"PALDEA\";\n})(Region || (exports.Region = Region = {}));\nasync function getJson(apiUrl, baseUrl = BaseURL.PokedexAPI) {\n    const fullUrl = `${baseUrl}/${apiUrl}`;\n    console.log('Fetching:', fullUrl);\n    try {\n        const response = await fetch(fullUrl);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data;\n    }\n    catch (error) {\n        console.error('Fetch error:', error);\n        throw error;\n    }\n}\nfunction getTypeIcon(type) {\n    if (!type.includes('_')) {\n        type = `POKEMON_TYPE_${type.toUpperCase()}`;\n    }\n    return `${BaseURL.PokeMiners}/Images/Types/${type}.png`;\n}\nfunction getWeatherIcon(assetName) {\n    return `${BaseURL.PokeMiners}/Images/Weather/${assetName}.png`;\n}\nasync function fetchCurrentRaidsJson() {\n    const data = await getJson(\"/raids\", BaseURL.PokeBattler);\n    console.log('raids:', data.breakingNews);\n    return data.breakingNews;\n}\nasync function fetchPokemonJson() {\n    let data = await getJson(\"pokedex.json\");\n    return data;\n}\nasync function fetchTypeJson() {\n    let data = await getJson(\"types.json\");\n    return data;\n}\nfunction extractRegionForms(pokemonJsonArray) {\n    const regionForms = new Set();\n    pokemonJsonArray.forEach((pokemonJson) => {\n        Object.entries(pokemonJson.regionForms).forEach((regionForm) => {\n            regionForms.add(regionForm[1]);\n        });\n    });\n    const regionFormsArray = Array.from(regionForms);\n    return regionFormsArray;\n}\nfunction getTypesArray(typesJsonArray) {\n    function convertTypeJsonToType(typeJson) {\n        const type = typeJson.type;\n        const name = typeJson.names.English;\n        const imageUrl = getTypeIcon(type);\n        const doubleDamageFrom = typeJson.doubleDamageFrom;\n        const halfDamageFrom = typeJson.halfDamageFrom;\n        const noDamageFrom = typeJson.noDamageFrom;\n        const weatherBoostJson = typeJson.weatherBoost;\n        const weatherBoost = {\n            id: weatherBoostJson.id,\n            name: weatherBoostJson.names.English,\n            imageUrl: getWeatherIcon(weatherBoostJson.id)\n        };\n        const typeObject = {\n            type: type,\n            name: name,\n            imageUrl: imageUrl,\n            doubleDamageFrom: doubleDamageFrom,\n            halfDamageFrom: halfDamageFrom,\n            noDamageFrom: noDamageFrom,\n            weatherBoost: weatherBoost\n        };\n        return typeObject;\n    }\n    const typesArray = typesJsonArray.map((typeJson) => {\n        return convertTypeJsonToType(typeJson);\n    });\n    return typesArray;\n}\nfunction getPokemonArray(pokemonJsonArray) {\n    function PokemonImageUrlTo256x(imageUrl) {\n        return imageUrl.replace('/Images/Pokemon/', '/Images/Pokemon%20-%20256x256/');\n    }\n    function convertPokemonJsonToPokemon(pokemonJson) {\n        const id = pokemonJson.id;\n        const formId = pokemonJson.formId;\n        const name = pokemonJson.names.English;\n        const dexNr = pokemonJson.dexNr;\n        const type1 = pokemonJson.primaryType.type;\n        const type2 = pokemonJson.secondaryType?.type;\n        const generation = pokemonJson.generation;\n        const imageUrl = pokemonJson.assets?.image ? PokemonImageUrlTo256x(pokemonJson.assets.image) : undefined;\n        const shinyImageUrl = pokemonJson.assets?.shinyImage || null;\n        const stats = pokemonJson.stats;\n        const pokemonClass = pokemonJson.pokemonClass || null;\n        const regionForms = Object.keys(pokemonJson.regionForms);\n        const evolutions = Object.values(pokemonJson.evolutions).map((evolutionJson) => {\n            return {\n                id: evolutionJson.id,\n                formId: evolutionJson.formId,\n                candies: evolutionJson.candies,\n                item: evolutionJson.item,\n                quests: evolutionJson.quests.map((questJson) => {\n                    return {\n                        id: questJson.id,\n                        name: questJson.names.English,\n                        type: questJson.type\n                    };\n                })\n            };\n        });\n        const megaEvolutions = Object.values(pokemonJson.megaEvolutions).map((megaEvolutionJson) => {\n            return {\n                id: megaEvolutionJson.id,\n                name: megaEvolutionJson.names.English,\n                imageUrl: megaEvolutionJson.assets.image,\n                shinyImageUrl: megaEvolutionJson.assets.shinyImage || null,\n                stats: megaEvolutionJson.stats,\n                type1: megaEvolutionJson.primaryType.type,\n                type2: megaEvolutionJson.secondaryType?.type || null\n            };\n        });\n        let allQuickMoves = new Set();\n        let allChargedMoves = new Set();\n        function moveJsonToMove(moveJson, isLegacy) {\n            const id = moveJson.id;\n            const name = moveJson.names.English;\n            const type = moveJson.type.type;\n            const gym = {\n                power: moveJson.combat.power,\n                energy: moveJson.combat.energy,\n                durationMs: moveJson.durationMs\n            };\n            const combat = {\n                energy: moveJson.combat.energy,\n                power: moveJson.combat.power,\n                turns: moveJson.combat.turns,\n                buffs: moveJson.combat.buffs || null\n            };\n            const moveObject = {\n                id: id,\n                name: name,\n                type: type,\n                isLegacy: isLegacy,\n                gym: gym,\n                combat: combat\n            };\n            return moveObject;\n        }\n        Object.entries(pokemonJson.eliteQuickMoves).forEach((move) => {\n            const isLegacy = true;\n            const moveJson = move[1];\n            const moveObject = moveJsonToMove(moveJson, isLegacy);\n            allQuickMoves.add(moveObject);\n        });\n        Object.entries(pokemonJson.quickMoves).forEach((move) => {\n            const isLegacy = false;\n            const moveJson = move[1];\n            const moveObject = moveJsonToMove(moveJson, isLegacy);\n            allQuickMoves.add(moveObject);\n        });\n        Object.entries(pokemonJson.eliteCinematicMoves).forEach((move) => {\n            const isLegacy = true;\n            const moveJson = move[1];\n            const moveObject = moveJsonToMove(moveJson, isLegacy);\n            allChargedMoves.add(moveObject);\n        });\n        Object.entries(pokemonJson.cinematicMoves).forEach((move) => {\n            const isLegacy = false;\n            const moveJson = move[1];\n            const moveObject = moveJsonToMove(moveJson, isLegacy);\n            allChargedMoves.add(moveObject);\n        });\n        const quickMoves = Array.from(allQuickMoves);\n        const chargedMoves = Array.from(allChargedMoves);\n        const pokemon = {\n            id: id,\n            formId: formId,\n            name: name,\n            dexNr: dexNr,\n            type1: type1,\n            type2: type2,\n            generation: generation,\n            imageUrl: imageUrl,\n            shinyImageUrl: shinyImageUrl,\n            stats: stats,\n            quickMoves: quickMoves,\n            chargedMoves: chargedMoves,\n            pokemonClass: pokemonClass,\n            regionForms: regionForms,\n            evolutions: evolutions,\n            megaEvolutions: megaEvolutions\n        };\n        return pokemon;\n    }\n    const pokemonArray = pokemonJsonArray.map((pokemonJson) => {\n        return convertPokemonJsonToPokemon(pokemonJson);\n    });\n    //crazy id conversion (blame the api)\n    pokemonArray.forEach((pokemon) => {\n        pokemon.evolutions.forEach((evolution) => {\n            if (evolution.formId.includes('_NORMAL')) {\n                evolution.formId = evolution.formId.replace('_NORMAL', '');\n            }\n        });\n    });\n    //fix for nidoran male and female\n    pokemonArray.forEach((pokemon) => {\n        if (pokemon.id === \"NIDORAN_MALE\") {\n            pokemon.formId = \"NIDORAN_MALE\";\n        }\n        if (pokemon.id === \"NIDORAN_FEMALE\") {\n            pokemon.formId = \"NIDORAN_FEMALE\";\n        }\n    });\n    //creates the symmetric transitive relationship between pokemon regional forms. each pokemon.regionForms should be an exhaustive list of all regional forms it has a relationship with.\n    pokemonArray.forEach((pokemon) => {\n        const regionFormId = pokemon.formId;\n        const regionalForms = new Set();\n        //symmetric closure\n        pokemonArray.forEach((potentialParent) => {\n            if (potentialParent.regionForms.includes(regionFormId)) {\n                regionalForms.add(potentialParent.formId);\n                potentialParent.regionForms.forEach((formId) => {\n                    regionalForms.add(formId);\n                });\n            }\n        });\n        //transitive closure\n        regionalForms.forEach((formId) => {\n            pokemonArray.forEach((potentialSibling) => {\n                if (regionalForms.has(potentialSibling.formId) && potentialSibling.formId !== regionFormId) {\n                    if (!pokemon.regionForms.includes(potentialSibling.formId)) {\n                        pokemon.regionForms.push(potentialSibling.formId);\n                    }\n                    if (!potentialSibling.regionForms.includes(regionFormId)) {\n                        potentialSibling.regionForms.push(regionFormId);\n                    }\n                }\n            });\n        });\n    });\n    console.log('pokemonArray:', pokemonArray);\n    return pokemonArray;\n}\nasync function getRaids() {\n    const raidsJson = await fetchCurrentRaidsJson();\n    const formIds = new Set();\n    raidsJson.forEach((raidJson) => {\n        formIds.add(raidJson.pokemon);\n    });\n    console.log('formIds:', formIds);\n    const raidPokemon = await Promise.all(Array.from(formIds).map((formId) => {\n        //diabolical work around until mega forms are searchable\n        if (formId.includes('_MEGA')) {\n            formId = formId.replace('_MEGA', '');\n        }\n        return getPokemonById(formId);\n    }));\n    const raids = raidsJson.map((raidJson) => {\n        const pokemon = raidPokemon.find((pokemon) => pokemon.formId === raidJson.pokemon);\n        if (!pokemon) {\n            console.warn(`Pokemon with formId ${raidJson.pokemon} not found in raidPokemon array.`);\n            return null;\n        }\n        return {\n            pokemon: pokemon,\n            shiny: raidJson.shiny,\n            tier: raidJson.tier,\n            startDate: raidJson.startDate,\n            endDate: raidJson.endDate,\n            activeDate: raidJson.activeDate\n        };\n    }).filter(raid => raid !== null);\n    return raids;\n}\nconst indexedDB = window.indexedDB;\nasync function initDB() {\n    localStorage.setItem('lastUpdate', new Date().toISOString());\n    console.log('db refreshed');\n    const typesData = await fetchTypeJson();\n    const allTypesData = getTypesArray(typesData);\n    //temporary costume exclusion while i work out how theyll be handled\n    const costumeFormIds = ['PIKACHU_DOCTOR', 'PIKACHU_FLYING_01', 'PIKACHU_FLYING_02', 'PIKACHU_TSHIRT_01', 'PIKACHU_TSHIRT_02', 'PIKACHU_FLYING_03', 'PIKACHU_FLYING_04', 'PIKACHU_FLYING_5TH_ANNIV', 'PIKACHU_FLYING_OKINAWA', 'PIKACHU_GOFEST_2024_MTIARA', 'PIKACHU_GOFEST_2024_STIARA', 'PIKACHU_GOTOUR_2024_A', 'PIKACHU_GOTOUR_2024_A_02', 'PIKACHU_GOTOUR_2024_B', 'PIKACHU_GOTOUR_2024_B_02', 'PIKACHU_HORIZONS', 'PIKACHU_JEJU', 'PIKACHU_KARIYUSHI', 'PIKACHU_POP_STAR', 'PIKACHU_ROCK_STAR', 'PIKACHU_SUMMER_2023_A', 'PIKACHU_SUMMER_2023_B', 'PIKACHU_SUMMER_2023_C', 'PIKACHU_SUMMER_2023_D', 'PIKACHU_SUMMER_2023_E', 'PIKACHU_TSHIRT_03', 'EEVEE_GOFEST_2024_MTIARA', 'EEVEE_GOFEST_2024_STIARA', 'ESPEON_GOFEST_2024_SSCARF', 'UMBREON_GOFEST_2024_MSCARF'];\n    const pokemonData = await fetchPokemonJson();\n    const regionForms = extractRegionForms(pokemonData);\n    const allPokemonData = pokemonData.concat(regionForms);\n    const allPokemonArray = getPokemonArray(allPokemonData);\n    //map of all pokemon by formid -> pokemon\n    //nidoran male and female have the same formid but belonging to a different pokemon id. \n    //this is the only non-unique formid across all pokemon ids.\n    //basically formid == uniqueid if you ignore nidoran. its irrelevant anyway.\n    const allPokemonMap = new Map();\n    allPokemonArray.forEach((pokemon) => {\n        //temp costume exclusion\n        if (costumeFormIds.includes(pokemon.formId)) {\n            return;\n        }\n        allPokemonMap.set(pokemon.formId, pokemon);\n    });\n    return new Promise((resolve, reject) => {\n        const request = indexedDB.open('pokedex', 7);\n        request.onerror = (event) => {\n            console.error('Database error:', event);\n            reject(event);\n        };\n        request.onupgradeneeded = (event) => {\n            console.warn('Database upgrade needed:', event);\n            const db = request.result;\n            if (db.objectStoreNames.contains('pokemon')) {\n                db.deleteObjectStore('pokemon');\n            }\n            if (db.objectStoreNames.contains('types')) {\n                db.deleteObjectStore('types');\n            }\n            const pokemonStore = db.createObjectStore('pokemon', { keyPath: 'formId' });\n            pokemonStore.createIndex(\"id\", \"id\", { unique: false });\n            pokemonStore.createIndex(\"name\", \"name\", { unique: false });\n            pokemonStore.createIndex(\"type1\", \"type1\", { unique: false });\n            pokemonStore.createIndex(\"type2\", \"type2\", { unique: false });\n            pokemonStore.createIndex(\"generation\", \"generation\", { unique: false });\n            pokemonStore.createIndex(\"dexNr\", \"dexNr\", { unique: false });\n            const typeStore = db.createObjectStore('types', { keyPath: 'type' });\n            typeStore.createIndex(\"name\", \"name\", { unique: true });\n            typeStore.createIndex(\"doubleDamageFrom\", \"doubleDamageFrom\", { unique: false });\n            typeStore.createIndex(\"halfDamageFrom\", \"halfDamageFrom\", { unique: false });\n            typeStore.createIndex(\"noDamageFrom\", \"noDamageFrom\", { unique: false });\n            typeStore.createIndex(\"weatherBoostName\", \"weatherBoost.name\", { unique: false });\n            //populates object stores after upgrading\n            request.transaction.oncomplete = (event) => {\n                console.warn('Database upgrade complete:', event);\n                const transaction = db.transaction(['pokemon', 'types'], 'readwrite');\n                const pokemonStore = transaction.objectStore('pokemon');\n                const typeStore = transaction.objectStore('types');\n                const allPokemonArray = Array.from(allPokemonMap.values());\n                allPokemonArray.forEach((pokemon) => {\n                    pokemonStore.put(pokemon);\n                });\n                allTypesData.forEach((type) => {\n                    typeStore.put(type);\n                });\n                transaction.oncomplete = () => {\n                    console.warn('store populated');\n                    resolve();\n                };\n                transaction.onerror = (event) => {\n                    console.error('Transaction error:', event);\n                    reject(event);\n                };\n            };\n        };\n        request.onsuccess = (event) => {\n            console.warn('Database opened:', event);\n            const db = request.result;\n            const transaction = db.transaction(['pokemon', 'types'], 'readwrite');\n            const pokemonStore = transaction.objectStore('pokemon');\n            const typeStore = transaction.objectStore('types');\n            const allPokemonArray = Array.from(allPokemonMap.values());\n            allPokemonArray.forEach((pokemon) => {\n                pokemonStore.put(pokemon);\n            });\n            allTypesData.forEach((type) => {\n                typeStore.put(type);\n            });\n            transaction.onerror = (event) => {\n                console.error('Transaction error:', event);\n                reject(event);\n            };\n            transaction.oncomplete = (event) => {\n                db.close();\n                resolve();\n            };\n        };\n    });\n}\n//private to ensure access through repository only\nfunction openDB() {\n    return new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"pokedex\");\n        request.onerror = (event) => {\n            console.error('Database error:', event);\n            reject(event);\n        };\n        request.onsuccess = (event) => {\n            resolve(request.result);\n        };\n    });\n}\nfunction getAllPokemon(page, pageSize) {\n    return new Promise((resolve, reject) => {\n        openDB().then((db) => {\n            const transaction = db.transaction('pokemon', 'readonly');\n            const pokemonStore = transaction.objectStore('pokemon');\n            //whoops\n            const dexNrIndex = pokemonStore.index('dexNr');\n            const startIndex = (page - 1) * pageSize;\n            const stopIndex = startIndex + pageSize;\n            const request = dexNrIndex.openCursor();\n            const paginatedPokemon = [];\n            let currentIndex = 0;\n            request.onerror = (event) => {\n                console.error('Request error:', event);\n                reject(event);\n            };\n            request.onsuccess = (event) => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    if (currentIndex >= startIndex && currentIndex < stopIndex) {\n                        paginatedPokemon.push(cursor.value);\n                    }\n                    currentIndex++;\n                    if (currentIndex < stopIndex) {\n                        cursor.continue();\n                    }\n                    else {\n                        resolve(paginatedPokemon);\n                    }\n                }\n                else {\n                    resolve(paginatedPokemon);\n                }\n            };\n        }).catch((error) => {\n            reject(error);\n        });\n    });\n}\nfunction getPokemonById(formId) {\n    return new Promise((resolve, reject) => {\n        openDB().then((db) => {\n            const transaction = db.transaction('pokemon', 'readonly');\n            const pokemonStore = transaction.objectStore('pokemon');\n            const request = pokemonStore.get(formId);\n            request.onerror = (event) => {\n                console.error('Request error:', event);\n                reject(event);\n            };\n            request.onsuccess = (event) => {\n                resolve(request.result);\n            };\n        });\n    });\n}\nfunction getPokemonByRegion(region, page, pageSize) {\n    return new Promise((resolve, reject) => {\n        openDB().then((db) => {\n            const transaction = db.transaction('pokemon', 'readonly');\n            const pokemonStore = transaction.objectStore('pokemon');\n            const request = pokemonStore.getAll();\n            request.onerror = (event) => {\n                console.error('Request error:', event);\n                reject(event);\n            };\n            request.onsuccess = (event) => {\n                const allPokemon = request.result;\n                const regionPokemon = allPokemon.filter((pokemon) => {\n                    //form id has _REGIONNAME at the end\n                    return pokemon.formId.endsWith(`_${region}`);\n                });\n                const startIndex = (page - 1) * pageSize;\n                const stopIndex = startIndex + pageSize;\n                const paginatedPokemon = regionPokemon.slice(startIndex, stopIndex);\n                resolve(paginatedPokemon);\n            };\n        }).catch((error) => {\n            reject(error);\n        });\n    });\n}\n//prioritises matches that start with the query, then contains at pos 0, 1, 2 ... etc.\nfunction searchPokemonByName(rawQuery, page, pageSize) {\n    return new Promise(async (resolve, reject) => {\n        const startTime = performance.now();\n        openDB().then((db) => {\n            const transaction = db.transaction('pokemon', 'readonly');\n            const pokemonStore = transaction.objectStore('pokemon');\n            const index = pokemonStore.index('name');\n            const query = rawQuery.toLowerCase();\n            transaction.onerror = (event) => {\n                console.error('Transaction error:', event);\n                reject(event);\n            };\n            const matchedPokemon = [];\n            const startIndex = (page - 1) * pageSize;\n            const stopIndex = startIndex + pageSize;\n            let count = 0;\n            index.openCursor().onsuccess = (event) => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    const pokemon = cursor.value;\n                    const nameLowerCase = pokemon.name.toLowerCase();\n                    const indexOfQuery = nameLowerCase.indexOf(query);\n                    if (indexOfQuery !== -1) {\n                        if (count >= startIndex && count < stopIndex) {\n                            matchedPokemon.push({ pokemon, rank: indexOfQuery });\n                        }\n                        count++;\n                    }\n                    cursor.continue();\n                }\n                else {\n                    matchedPokemon.sort((a, b) => a.rank - b.rank);\n                    const sortedPokemon = matchedPokemon.map(entry => entry.pokemon);\n                    const endTime = performance.now();\n                    const queryDuration = endTime - startTime;\n                    console.log(\"Request time:\", queryDuration);\n                    resolve(sortedPokemon);\n                }\n            };\n        }).catch((error) => {\n            reject(error);\n        });\n    });\n}\nfunction isDBEmpty() {\n    return new Promise((resolve, reject) => {\n        openDB().then((db) => {\n            try {\n                const transaction = db.transaction('pokemon', 'readonly');\n                const pokemonStore = transaction.objectStore('pokemon');\n                const request = pokemonStore.count();\n                request.onerror = (event) => {\n                    console.error('Request error:', event);\n                    reject(event);\n                };\n                request.onsuccess = (event) => {\n                    resolve(request.result === 0);\n                };\n            }\n            catch (error) {\n                console.error('Transaction error:', error);\n                resolve(true); // Resolve as true if the object store does not exist\n            }\n        }).catch((error) => {\n            console.error('Failed to open database:', error);\n            reject(error);\n        });\n    });\n}\nfunction isDBStale() {\n    const lastUpdate = localStorage.getItem('lastUpdate');\n    if (!lastUpdate) {\n        return true;\n    }\n    const currentTime = new Date().getTime();\n    const lastUpdateDate = new Date(lastUpdate).getTime();\n    const timeSinceUpdate = currentTime - lastUpdateDate;\n    const oneHour = 1000 * 60 * 60;\n    const isDbStale = timeSinceUpdate > oneHour;\n    console.log('Time since last update:', timeSinceUpdate);\n    console.log('Threshold for stale:', oneHour);\n    console.log('DB stale:', isDbStale);\n    return isDbStale;\n}\nexports.typeColors = {\n    POKEMON_TYPE_BUG: \"#92BC2C\",\n    POKEMON_TYPE_DARK: \"#595761\",\n    POKEMON_TYPE_DRAGON: \"#0C69C8\",\n    POKEMON_TYPE_ELECTRIC: \"#F2D94E\",\n    POKEMON_TYPE_FIRE: \"#FBA54C\",\n    POKEMON_TYPE_FAIRY: \"#EE90E6\",\n    POKEMON_TYPE_FIGHTING: \"#D3425F\",\n    POKEMON_TYPE_FLYING: \"#A1BBEC\",\n    POKEMON_TYPE_GHOST: \"#5F6DBC\",\n    POKEMON_TYPE_GRASS: \"#5FBD58\",\n    POKEMON_TYPE_GROUND: \"#DA7C4D\",\n    POKEMON_TYPE_ICE: \"#75D0C1\",\n    POKEMON_TYPE_NORMAL: \"#A0A29F\",\n    POKEMON_TYPE_POISON: \"#B763CF\",\n    POKEMON_TYPE_PSYCHIC: \"#FA8581\",\n    POKEMON_TYPE_ROCK: \"#C9BB8A\",\n    POKEMON_TYPE_STEEL: \"#5695A3\",\n    POKEMON_TYPE_WATER: \"#539DDF\"\n};\nfunction getTypeBackground(type) {\n    if (type.includes('_')) {\n        type = type.split('_')[2];\n    }\n    type = type.charAt(0).toUpperCase() + type.slice(1).toLowerCase();\n    console.log(\"transformed type:\", type);\n    return `${BaseURL.PokeMiners}/Images/Catch%20Card/CatchCard_TypeBG_${type}.png`;\n}\nfunction getMegaIconSmall() {\n    return `${BaseURL.PokeMiners}/Images/Menu%20Icons/tex_mega_evolve_icon.png`;\n}\nfunction getTotalPokemonCount() {\n    return new Promise((resolve, reject) => {\n        openDB().then((db) => {\n            const transaction = db.transaction('pokemon', 'readonly');\n            const pokemonStore = transaction.objectStore('pokemon');\n            const request = pokemonStore.count();\n            request.onerror = (event) => {\n                console.error('Request error:', event);\n                reject(event);\n            };\n            request.onsuccess = (event) => {\n                resolve(request.result);\n            };\n        }).catch((error) => {\n            reject(error);\n        });\n    });\n}\n\n\n//# sourceURL=webpack:///./src/util/repository.ts?");

/***/ }),

/***/ "./src/util/sidebar.ts":
/*!*****************************!*\
  !*** ./src/util/sidebar.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.selectPokedex = selectPokedex;\nexports.selectEvents = selectEvents;\nexports.selectTypes = selectTypes;\nconst navLinkSelector = '.nav-item';\nfunction selectPokedex() {\n    deselectAllNavLinks();\n    const pokedexNav = document.getElementById('pokedex-nav');\n    if (pokedexNav) {\n        pokedexNav.classList.add('active');\n    }\n}\nfunction selectEvents() {\n    deselectAllNavLinks();\n    const eventsNav = document.getElementById('events-nav');\n    if (eventsNav) {\n        eventsNav.classList.add('active');\n    }\n}\nfunction selectTypes() {\n    deselectAllNavLinks();\n    const typesNav = document.getElementById('types-nav');\n    if (typesNav) {\n        typesNav.classList.add('active');\n    }\n}\nfunction deselectAllNavLinks() {\n    const navLinks = document.querySelectorAll(navLinkSelector);\n    if (navLinks.length > 0) {\n        navLinks.forEach((link) => {\n            link.classList.remove('active');\n        });\n    }\n    else {\n        console.error(\"No nav links found with selector:\", navLinkSelector);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/util/sidebar.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;